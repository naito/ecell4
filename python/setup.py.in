import sys
import os.path
import glob
import unittest

from setuptools import setup
from distutils.core import Command, Extension
# from distutils.core import setup, Command, Extension

from logging import getLogger, StreamHandler, Formatter, DEBUG
logger = getLogger(__name__)
handler = StreamHandler()
formatter = Formatter('%(levelname)s:%(name)s:%(message)s')
handler.setLevel(DEBUG)
handler.setFormatter(formatter)
logger.setLevel(DEBUG)
logger.addHandler(handler)

try:
    from Cython.Build import cythonize
    from Cython.Distutils import build_ext
except ImportError:
    logger.error("You don't seem to have Cython installed. Please get a")
    logger.error("copy from www.cython.org and install it")
    sys.exit(1)

os.environ["CC"] = "${CMAKE_C_COMPILER}"
os.environ["CXX"] = "${CMAKE_CXX_COMPILER}"
source_dir = "${PROJECT_SOURCE_DIR}"
python_dir = os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "lib")
include_dirs = [source_dir] + "${INCLUDE_PATH}".split(";")

logger.debug("CC={}".format(os.environ["CC"]))
logger.debug("CXX={}".format(os.environ["CXX"]))
logger.debug("source_dir={}".format(source_dir))
logger.debug("python_dir={}".format(python_dir))
logger.debug("include_dirs={}".format(include_dirs))

sys.path.append(python_dir)

class run_tests(Command):
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        top_level_dir=os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "tests")
        test_loader = unittest.TestLoader()
        def load_tests(module_name):
            return test_loader.discover(
                os.path.join(top_level_dir, module_name), top_level_dir=top_level_dir)

        suite = unittest.TestSuite()
        suite.addTest(load_tests("core"))
        # suite.addTest(load_tests("gillespie"))
        # suite.addTest(load_tests("bd"))
        # suite.addTest(load_tests("ode"))
        # suite.addTest(load_tests("spatiocyte"))
        suite.addTest(load_tests("util"))
        test_runner = unittest.TextTestRunner()
        test_runner.run(suite)

libraries = []
library_dirs = []

with_cpp_shared_libraries = False

if "--prefer-shared" in sys.argv:
    #XXX: This might be not a proper way to give a user defined parameter
    with_cpp_shared_libraries = True
    sys.argv.remove("--prefer-shared")

with_hdf5 = (sys.platform in ("win32", "darwin") or not with_cpp_shared_libraries)

if "--hdf5" in sys.argv:
    #XXX: This might be not a proper way to give a user defined parameter
    with_hdf5 = True
    sys.argv.remove("--hdf5")

if "--disable_hdf5" in sys.argv:
    #XXX: This might be not a proper way to give a user defined parameter
    with_hdf5 = False
    sys.argv.remove("--disable-hdf5")

if sys.platform == "win32" and sys.version_info.major == 2:
    libraries.extend(['gsl', 'cblas'])
    extra_compile_args = ["/EHsc", "-DWIN32_MSC", "-DHAVE_CONFIG_H", "-DHAVE_INLINE"]
    # extra_compile_args.append('-DNO_BESSEL_TABLE')
elif sys.platform == "win32" and sys.version_info.major == 3:
    libraries.extend(['gsl', 'gslcblas'])
    extra_compile_args = ["/EHsc", "/w", "-DWIN32_MSC", "-DHAVE_CONFIG_H"]  # "-DHAVE_INLINE"
    # extra_compile_args.append('-DNO_BESSEL_TABLE')
elif sys.platform == "darwin":
    libraries.extend(['gsl', 'gslcblas', 'm'])
    extra_compile_args = ["-DNO_BESSEL_TABLE", "-DHAVE_CONFIG_H"]
else: # for linux
    libraries.extend(['gsl', 'gslcblas', 'm'])
    extra_compile_args = ["-DNO_BESSEL_TABLE", "-DHAVE_CONFIG_H"]

logger.debug("with_hdf5={}".format(with_hdf5))

if with_hdf5:
    libraries.extend(['hdf5_cpp', 'hdf5'])
    library_dirs.extend("${HDF5_LIBRARY_DIRS}".split(";"))
    extra_compile_args.append("-DWITH_HDF5")
    if sys.platform == "win32":
        extra_compile_args.extend(
            ["-D_HDF5USEDLL_", "-DHDF5CPP_USEDLL", "-DH5_BUILT_AS_DYNAMIC_LIB"])

if True: # with_vtk
    libraries.extend("${VTK_LIBRARIES}".split(";"))
    library_dirs.extend("${VTK_LIBRARY_DIRS}".split(";"))

libraries = [name for name in libraries if name.strip() != ""]
library_dirs = [path for path in library_dirs if path.strip() != ""]

logger.debug("libraries={}".format(libraries))
logger.debug("library_dirs={}".format(library_dirs))
logger.debug("extra_compile_args={}".format(extra_compile_args))
logger.debug("with_cpp_shared_libraries={}".format(with_cpp_shared_libraries))

if with_cpp_shared_libraries:
    ext_modules = [
        Extension("ecell4.core", sources=[os.path.join(python_dir, "ecell4/core.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core"], language="c++",
            extra_compile_args=extra_compile_args),
        Extension("ecell4.egfrd", sources=[os.path.join(python_dir, "ecell4/egfrd.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core", "ecell4-egfrd", "greens_functions"],
            language="c++", extra_compile_args=extra_compile_args + ["-w"]),
        Extension("ecell4.gillespie", sources=[os.path.join(python_dir, "ecell4/gillespie.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core", "ecell4-gillespie"],
            language="c++", extra_compile_args=extra_compile_args),
        Extension("ecell4.bd", sources=[os.path.join(python_dir, "ecell4/bd.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core", "ecell4-bd"],
            language="c++", extra_compile_args=extra_compile_args),
        Extension("ecell4.ode", sources=[os.path.join(python_dir, "ecell4/ode.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core", "ecell4-ode"],
            language="c++", extra_compile_args=extra_compile_args),
        Extension("ecell4.spatiocyte", sources=[os.path.join(python_dir, "ecell4/spatiocyte.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core", "ecell4-spatiocyte"],
            language="c++", extra_compile_args=extra_compile_args),
        Extension("ecell4.meso", sources=[os.path.join(python_dir, "ecell4/meso.pyx")],
            include_dirs=include_dirs, libraries=["ecell4-core", "ecell4-meso"],
            language="c++", extra_compile_args=extra_compile_args),
        ]
else:
    core_src = glob.glob(os.path.join(source_dir, "ecell4/core/*.cpp"))
    greens_functions_src = glob.glob(os.path.join(source_dir, "greens_functions/*.cpp"))
    ext_modules = [
        Extension("ecell4.core", sources=[os.path.join(python_dir, "ecell4/core.pyx")] + core_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            include_dirs=include_dirs, libraries=libraries, language="c++"),
        Extension("ecell4.gillespie",
            sources=[os.path.join(python_dir, "ecell4/gillespie.pyx")]
                + glob.glob(os.path.join(source_dir, "ecell4/gillespie/*.cpp")) + core_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            libraries=libraries, include_dirs=include_dirs, language="c++"),
        Extension("ecell4.bd",
            sources=[os.path.join(python_dir, "ecell4/bd.pyx")]
                + glob.glob(os.path.join(source_dir, "ecell4/bd/*.cpp")) + core_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            libraries=libraries, include_dirs=include_dirs, language="c++"),
        Extension("ecell4.ode",
            sources=[os.path.join(python_dir, "ecell4/ode.pyx")]
                + glob.glob(os.path.join(source_dir, "ecell4/ode/*.cpp")) + core_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            libraries=libraries, include_dirs=include_dirs, language="c++"),
        Extension("ecell4.spatiocyte",
            sources=[os.path.join(python_dir, "ecell4/spatiocyte.pyx")]
                + glob.glob(os.path.join(source_dir, "ecell4/spatiocyte/*.cpp")) + core_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            libraries=libraries, include_dirs=include_dirs, language="c++"),
        Extension("ecell4.meso",
            sources=[os.path.join(python_dir, "ecell4/meso.pyx")]
                + glob.glob(os.path.join(source_dir, "ecell4/meso/*.cpp")) + core_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            libraries=libraries, include_dirs=include_dirs, language="c++"),
        Extension("ecell4.egfrd",
            sources=[os.path.join(python_dir, "ecell4/egfrd.pyx")]
                + glob.glob(os.path.join(source_dir, "ecell4/egfrd/*.cpp")) + core_src
                + greens_functions_src,
            extra_compile_args=extra_compile_args, library_dirs=library_dirs,
            libraries=libraries, include_dirs=include_dirs, language="c++")
        ]

ext_modules = cythonize(ext_modules)

def convert_path(pathname):
    if os.sep == '/':
        return pathname
    return pathname.replace('/', os.sep)  #XXX: This is a workaround for Windows

setup(
    name = "ecell",
    version = "${PROJECT_VERSION}",
    package_dir = {"": convert_path(python_dir)},
    package_data = {"ecell4.util": [
        "templates/init_ipynb.js", "templates/init_cyjs.js", "templates/template.html",
        "templates/*.tmpl", "templates/ecelllogo/*.png"]},
    data_files = [('ecell4-licenses', glob.glob(os.path.join(convert_path(source_dir), 'licenses/*')))],
    packages = ["ecell4", "ecell4.util", "ecell4.extra", "ecell4.datasource"],
    cmdclass = {'build_ext': build_ext, 'test': run_tests},
    license = "the GNU General Public License v2",
    author = "Kazunari Kaizu",
    author_email = "kaizu@riken.jp",
    url = "https://github.com/ecell/ecell4",
    ext_modules = ext_modules
    )
